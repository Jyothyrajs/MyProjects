AWSTemplateFormatVersion: 2010-09-09
Description: Creating custom VPC

# Custom VPC with private subnet and Internet Gateway

Parameters:

  CustomVpcCidr:
    Type: String
    Default: 10.0.0.0/20

  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24

  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'



Resources:

###########
# VPC with Internet Gateway
###########

  CustomVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CustomVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName']]

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Custom IGW

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - CustomVPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref CustomVPC






###########
# Public Subnet
###########

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: CustomVPC
    Properties:
      VpcId: !Ref CustomVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName']]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: CustomVPC
    Properties:
      VpcId: !Ref CustomVPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName']]

###########
# Public Route Table
###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: CustomVPC
    Properties:
      VpcId: !Ref CustomVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - IGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicSubnet1
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet2RouteTableAssociation:
     Type: AWS::EC2::SubnetRouteTableAssociation
     DependsOn: PublicSubnet2
     Properties:
       SubnetId:
         Ref: PublicSubnet2
       RouteTableId:
         Ref: PublicRouteTable



###########
# Web Security Group
###########
  CustomVpcALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: CustomVPC
    Properties:
      GroupName: CustomVPC
      GroupDescription: SSH Access
      VpcId: !Ref CustomVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: CustomVPCALB_Security

  Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmazonLinuxAMIID
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref CustomVpcALBSecurityGroup
      Tags:
        - Key: Name
          Value: customVPCEC2
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd php
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          # PHP script to display Instance ID and Availability Zone
          cat << 'EOF' > /var/www/html/index.php
            <!DOCTYPE html>
            <html>
            <body>
              <center>
                <?php
                # Get the instance ID from meta-data and store it in the $instance_id variable
                $url = "http://169.254.169.254/latest/meta-data/instance-id";
                $instance_id = file_get_contents($url);
                # Get the instance's availability zone from metadata and store it in the $zone variable
                $url = "http://169.254.169.254/latest/meta-data/placement/availability-zone";
                $zone = file_get_contents($url);
                ?>
                <h2>EC2 Instance ID: <?php echo $instance_id ?></h2>
                <h2>Availability Zone: <?php echo $zone ?></h2>
              </center>
            </body>
            </html>
          EOF

  Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmazonLinuxAMIID
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref CustomVpcALBSecurityGroup
      Tags:
        - Key: Name
          Value: customVPCEC2
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd php
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          # PHP script to display Instance ID and Availability Zone
          cat << 'EOF' > /var/www/html/index.php
            <!DOCTYPE html>
            <html>
            <body>
              <center>
                <?php
                # Get the instance ID from meta-data and store it in the $instance_id variable
                $url = "http://169.254.169.254/latest/meta-data/instance-id";
                $instance_id = file_get_contents($url);
                # Get the instance's availability zone from metadata and store it in the $zone variable
                $url = "http://169.254.169.254/latest/meta-data/placement/availability-zone";
                $zone = file_get_contents($url);
                ?>
                <h2>EC2 Instance ID: <?php echo $instance_id ?></h2>
                <h2>Availability Zone: <?php echo $zone ?></h2>
              </center>
            </body>
            </html>
          EOF

  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"

    Properties:
        Name: "Blog-Application-Load-Balancer"
        Scheme: "internet-facing"
        Type: "application"
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroups:
          - !Ref CustomVpcALBSecurityGroup
        IpAddressType: "ipv4"
        LoadBalancerAttributes:
          -
            Key: "access_logs.s3.enabled"
            Value: "false"
          -
            Key: "idle_timeout.timeout_seconds"
            Value: "60"
          -
            Key: "deletion_protection.enabled"
            Value: "false"
          -
            Key: "routing.http2.enabled"
            Value: "true"
          -
            Key: "routing.http.drop_invalid_header_fields.enabled"
            Value: "false"

  HTTPlistener:
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
     DefaultActions:
       - Type: "forward"
         ForwardConfig:
          TargetGroups:
            - TargetGroupArn: !Ref Test1TargetGroup
              Weight: 1
            - TargetGroupArn: !Ref Test2TargetGroup
              Weight: 1
     LoadBalancerArn: !Ref ApplicationLoadBalancer
     Port: 80
     Protocol: "HTTP"

  Test1TargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
          HealthCheckIntervalSeconds: 30
          HealthCheckPath: "/"
          Port: 80
          Protocol: "HTTP"
          HealthCheckPort: "traffic-port"
          HealthCheckProtocol: "HTTP"
          HealthCheckTimeoutSeconds: 5
          UnhealthyThresholdCount: 2
          TargetType: "instance"
          Targets:
            - Id: !Ref Instance1
          Matcher:
              HttpCode: "200"
          HealthyThresholdCount: 5
          VpcId: !Ref CustomVPC
          Name: "target-group-1"
          HealthCheckEnabled: true
          TargetGroupAttributes:
            -
              Key: "stickiness.enabled"
              Value: "false"
            -
              Key: "deregistration_delay.timeout_seconds"
              Value: "300"
            -
              Key: "stickiness.type"
              Value: "lb_cookie"
            -
              Key: "stickiness.lb_cookie.duration_seconds"
              Value: "86400"
            -
              Key: "slow_start.duration_seconds"
              Value: "0"
            -
              Key: "load_balancing.algorithm.type"
              Value: "round_robin"

  Test2TargetGroup:
      Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
      Properties:
          HealthCheckIntervalSeconds: 30
          HealthCheckPath: "/"
          Port: 80
          Protocol: "HTTP"
          HealthCheckPort: "traffic-port"
          HealthCheckProtocol: "HTTP"
          HealthCheckTimeoutSeconds: 5
          UnhealthyThresholdCount: 2
          TargetType: "instance"
          Targets:
            - Id: !Ref Instance2
          Matcher:
              HttpCode: "200"
          HealthyThresholdCount: 5
          VpcId: !Ref CustomVPC
          Name: "target-group-2"
          HealthCheckEnabled: true
          TargetGroupAttributes:
            -
              Key: "stickiness.enabled"
              Value: "false"
            -
              Key: "deregistration_delay.timeout_seconds"
              Value: "300"
            -
              Key: "stickiness.type"
              Value: "lb_cookie"
            -
              Key: "stickiness.lb_cookie.duration_seconds"
              Value: "86400"
            -
              Key: "slow_start.duration_seconds"
              Value: "0"
            -
              Key: "load_balancing.algorithm.type"
              Value: "round_robin"
